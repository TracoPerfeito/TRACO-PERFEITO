<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Criar Contratação</title>
    <link rel="stylesheet" href="css/criar-contratacao.css">
    
    <link rel="shortcut icon" href="imagens/favicon.ico" type="image/x-icon">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,100..700;1,100..700&family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet"> 
    <link href="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.snow.css" rel="stylesheet" />
     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simple-notify@0.5.5/dist/simple-notify.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/simple-notify@0.5.5/dist/simple-notify.min.js"></script>
   <script src="js/simple-notify.js"></script>

</head>

    
  
<body>


 

    
<% if (status_usuario === 'pendente') { %>
    <%- include('../partials/aviso-pendente') %>
    
<% } %>
  
    
  


   <% if (tipo_usuario === 'profissional') { %>
  <%- include('../partials/menu-logado', { tipo_usuario: tipo_usuario }) %>
<% } else if (tipo_usuario === 'comum') { %>
  <%- include('../partials/menu-c-c', { tipo_usuario: tipo_usuario }) %>
<% } else { %>
  <%- include('../partials/menu', { tipo_usuario: tipo_usuario }) %>
<% } %>


<main class="container mt-4">

  <section class="conteudo-principal">
    <h1 class="criarContratacao mb-4">Criar Contratação</h1>
    <form action="/salvarcontratacao" method="POST">
      <section class="form-grid">
        <section class="col">
          <!-- Coluna esquerda -->
       <section class="mb-3">
  <label for="id_cliente" class="form-label">Contratante</label>
  <% if (usuLogado.tipo === 'comum' && destinatario.tipo === 'profissional') { %>
    <input type="text" class="form-control" value="<%= usuLogado.nome %>" disabled>
    <input type="hidden" name="ID_CONTRATANTE" value="<%= usuLogado.id %>">
  <% } else { %>
 <select id="select-contratante" class="form-control" name="ID_CONTRATANTE" required>
  <option value="<%= usuLogado.id %>"><%= usuLogado.nome %></option>
  <% if (destinatario.id !== usuLogado.id) { %>
    <option value="<%= destinatario.id %>"><%= destinatario.nome %></option>
  <% } %>
</select>
  <% } %>
</section>

<section class="mb-3">
  <label for="id_profissional" class="form-label">Contratado</label>
  <% if (usuLogado.tipo === 'comum' && destinatario.tipo === 'profissional') { %>
    <input type="text" class="form-control" value="<%= destinatario.nome %>" disabled>
    <input type="hidden" name="ID_CONTRATADO" value="<%= destinatario.id %>">
  <% } else { %>
   <select id="select-contratado" class="form-control" name="ID_CONTRATADO" required>
  <% if (destinatario.id !== usuLogado.id) { %>
    <option value="<%= destinatario.id %>"><%= destinatario.nome %></option>
  <% } %>
  <option value="<%= usuLogado.id %>"><%= usuLogado.nome %></option>
</select>
  <% } %>
</section>

          <section class="mb-3">
            <label for="nome_projeto" class="form-label">Nome do Projeto</label>
            <input type="text" class="form-control" id="nome_projeto" name="NOME_PROJETO" required>
          </section>
    
          <section class="mb-3">
            <label for="valor_total" class="form-label">Valor Total (R$)</label>
            <input type="number" step="0.01" class="form-control" id="valor_total" name="VALOR_TOTAL" required>
          </section>
    
          <section class="mb-3">
            <label for="data_entrega" class="form-label">Data de Entrega</label>
            <input type="date" class="form-control" id="data_entrega" name="DATA_ENTREGA" required>
          </section>
        </section>
    
        <section class="col right-col">
          <!-- Coluna direita (finalidade + observações) -->
          <section class="mb-3">
            <label for="finalidade" class="form-label">Finalidade</label>
            <textarea class="form-control" id="finalidade" name="DESCRICAO" rows="6" required></textarea>
          </section>
    
          <section class="mb-3">
            <label for="observacoes" class="form-label">Observações</label>
            <textarea class="form-control" id="observacoes" name="OBSERVACOES" rows="4"></textarea>
          </section>
        </section>
      </section>
      <section class="card p-3 mb-3" id="section-termos">
        <h5>Termos e Condições</h5>
        <p class="small text-muted">
          Ao criar esta contratação, você concorda que o pagamento será processado pela plataforma
          e só será liberado ao profissional após a confirmação do cliente.
          A plataforma poderá reter taxas administrativas e intermediar disputas quando necessário.
        </p>
      <section class="form-check">
  <input class="form-check-input" type="checkbox" id="aceitar_termos" name="ACEITAR_TERMOS" required>
  <label class="form-check-label" for="aceitar_termos">
    Li e aceito os termos e condições
  </label>
</section>

      </section>
      <!-- Botão -->
      <button type="submit" class="btn btn-primary">Criar Contratação</button>
    </form>
  </section>
</main>



   <% if (tipo_usuario === 'profissional') { %>

                 <%- include('../partials/fab-button') %>
<% }   else if(tipo_usuario === 'comum') {   %>
        <%- include('../partials/fab-button-comum') %>
  <% } %>
  

           
<script src="js/mobile-navbar.js"></script>

<script>
const selectContratante = document.getElementById('select-contratante');
const selectContratado = document.getElementById('select-contratado');

const usuLogadoId = "<%= usuLogado.id %>";
const destinatarioId = "<%= destinatario.id %>";

function sincronizarSelects(changedSelect) {
  const outroSelect = changedSelect === selectContratante ? selectContratado : selectContratante;

  // Se o valor do changedSelect for igual ao do outroSelect, troca automaticamente
  if (changedSelect.value === outroSelect.value) {
    outroSelect.value = (outroSelect.value === usuLogadoId) ? destinatarioId : usuLogadoId;
  }
}

// Evento de mudança nos selects
selectContratante.addEventListener('change', () => sincronizarSelects(selectContratante));
selectContratado.addEventListener('change', () => sincronizarSelects(selectContratado));

// Inicializa com valores corretos
sincronizarSelects(selectContratante);
</script>


<script>
document.addEventListener("DOMContentLoaded", () => {
  const form = document.querySelector("form");

  const campos = {
    nomeProjeto: document.getElementById("nome_projeto"),
    descricao: document.getElementById("finalidade"),
    valorTotal: document.getElementById("valor_total"),
    dataEntrega: document.getElementById("data_entrega"),
    observacoes: document.getElementById("observacoes"),
    termos: document.getElementById("aceitar_termos"),
  };

  const limites = {
    nomeProjeto: { min: 2, max: 100 },
    descricao: { min: 2, max: 7000 },
    observacoes: { max: 1000 },
  };

  // --- Cria contadores de caracteres ---
  function criarContador(campo, limite) {
    if (!campo) return;
    const contador = document.createElement("small");
    contador.classList.add("contador");
    contador.style.display = "block";
    contador.style.textAlign = "right";
    contador.style.opacity = "0.7";
    contador.textContent = `0 / ${limite}`;
    campo.insertAdjacentElement("afterend", contador);

    campo.addEventListener("input", () => {
      const len = campo.value.length;
      contador.textContent = `${len} / ${limite}`;
      contador.style.color = len > limite ? "rgb(219, 84, 97)" : "var(--text-color)";
    });
  }

  criarContador(campos.nomeProjeto, limites.nomeProjeto.max);
  criarContador(campos.descricao, limites.descricao.max);
  criarContador(campos.observacoes, limites.observacoes.max);

  // --- Função de exibição de erro ---
  function mostrarErro(campo, mensagem) {
    let msg = campo.parentElement.querySelector(".msg-erro");
    if (!msg) {
      msg = document.createElement("small");
      msg.classList.add("msg-erro");
      msg.style.color = "rgb(219, 84, 97)";
      msg.style.display = "block";
      msg.style.marginTop = "-8px";
      msg.style.marginBottom = "10px";
      campo.insertAdjacentElement("afterend", msg);
    }
    msg.textContent = mensagem;
    campo.classList.add("input-invalido");
  }

  function limparErro(campo) {
    campo.classList.remove("input-invalido");
    const msg = campo.parentElement.querySelector(".msg-erro");
    if (msg) msg.remove();
  }

  // --- Validação ao enviar ---
  form.addEventListener("submit", (e) => {
    let valido = true;
    document.querySelectorAll(".msg-erro").forEach((m) => m.remove());

    // Nome do projeto
    const nome = campos.nomeProjeto.value.trim();
    if (nome.length < limites.nomeProjeto.min || nome.length > limites.nomeProjeto.max) {
      mostrarErro(campos.nomeProjeto, "O nome do projeto deve ter entre 2 e 100 caracteres.");
      valido = false;
    } else limparErro(campos.nomeProjeto);

    // Descrição
    const desc = campos.descricao.value.trim();
    if (desc.length < limites.descricao.min || desc.length > limites.descricao.max) {
      mostrarErro(campos.descricao, "A descrição deve ter entre 2 e 7000 caracteres.");
      valido = false;
    } else limparErro(campos.descricao);

    // Valor total
    const valor = parseFloat(campos.valorTotal.value);
    if (isNaN(valor) || valor < 0) {
      mostrarErro(campos.valorTotal, "O valor total deve ser um número positivo.");
      valido = false;
    } else limparErro(campos.valorTotal);

    // Data de entrega
    const dataEntrega = new Date(campos.dataEntrega.value);
    const hoje = new Date();
    const limite = new Date("2030-12-31");
    if (!campos.dataEntrega.value) {
      mostrarErro(campos.dataEntrega, "A data de entrega é obrigatória.");
      valido = false;
    } else if (dataEntrega < hoje) {
      mostrarErro(campos.dataEntrega, "A data de entrega não pode ser no passado.");
      valido = false;
    } else if (dataEntrega > limite) {
      mostrarErro(campos.dataEntrega, "A data de entrega deve ser até 31/12/2030");
      valido = false;
    } else limparErro(campos.dataEntrega);

    // Observações (opcional, mas com limite)
    const obs = campos.observacoes.value.trim();
    if (obs.length > limites.observacoes.max) {
      mostrarErro(campos.observacoes, "Observações podem ter no máximo 1000 caracteres.");
      valido = false;
    } else limparErro(campos.observacoes);

    // Termos
    if (!campos.termos.checked) {
      alert("Você deve aceitar os termos e condições para continuar.");
      valido = false;
    }

    if (!valido) e.preventDefault();
  });
});
</script>


</body>
</html>


