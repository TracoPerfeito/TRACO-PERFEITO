<section class="filtro-ordenacao">
  <button id="btnOrdenar" class="btn-ordenar">
     <ion-icon name="filter-outline"></ion-icon>
    <span id="textoOrdenar">Mais Recentes</span>
    <span id="iconeSeta"><ion-icon name="chevron-up"></ion-icon></span>
  </button>
  <section id="opcoesOrdenacao" class="opcoes-ordenacao oculto">
    <section data-ordem="mais-recentes">Mais Recentes <span class="check"><ion-icon name="checkmark-outline"></ion-icon></span></section>
    <section data-ordem="mais-antigos">Mais Antigos <span class="check"><ion-icon name="checkmark-outline"></ion-icon></span></section>
    <section data-ordem="prazo-curto">Prazo mais curto <span class="check"><ion-icon name="checkmark-outline"></ion-icon></span></section>
    <section data-ordem="prazo-longo">Prazo mais longo <span class="check"><ion-icon name="checkmark-outline"></ion-icon></span></section>
    <section data-ordem="orcamento-maior">Or√ßamento maior <span class="check"><ion-icon name="checkmark-outline"></ion-icon></span></section>
    <section data-ordem="orcamento-menor">Or√ßamento menor <span class="check"><ion-icon name="checkmark-outline"></ion-icon></span></section>
    <section data-ordem="titulo-az">T√≠tulo A-Z <span class="check"><ion-icon name="checkmark-outline"></ion-icon></span></section>
    <section data-ordem="titulo-za">T√≠tulo Z-A <span class="check"><ion-icon name="checkmark-outline"></ion-icon></span></section>
  </section>
</section>




<script>
document.addEventListener("DOMContentLoaded", () => {
  const btnOrdenar = document.getElementById("btnOrdenar");
  const textoOrdenar = document.getElementById("textoOrdenar");
  const iconeSeta = document.getElementById("iconeSeta");
  const opcoesOrdenacao = document.getElementById("opcoesOrdenacao");
  const opcoes = opcoesOrdenacao.querySelectorAll("section");

  console.log("üéØ DOM carregado - iniciando script de ordena√ß√£o");

  // Fun√ß√£o para atualizar sele√ß√£o visual
  const atualizarSelecao = (selecionada) => {
    console.log("‚úÖ Atualizando sele√ß√£o para:", selecionada.dataset.ordem);
    opcoes.forEach(o => o.classList.remove("selecionada"));
    selecionada.classList.add("selecionada");
    textoOrdenar.textContent = selecionada.textContent.replace("‚úî", "").trim();
    console.log("üìå Texto do bot√£o agora √©:", textoOrdenar.textContent);
  };

  // Toggle dropdown
  btnOrdenar.addEventListener("click", () => {
    const aberto = !opcoesOrdenacao.classList.toggle("oculto");
    iconeSeta.style.transform = aberto ? "rotate(180deg)" : "rotate(0deg)";
    console.log("üìÇ Dropdown aberto?", aberto);
  });

  // Clique nas op√ß√µes
  opcoes.forEach(opcao => {
    opcao.addEventListener("click", () => {
      console.log("üéØ Op√ß√£o clicada:", opcao.dataset.ordem);
      atualizarSelecao(opcao);
      ordenarPropostas(opcao.dataset.ordem);
      opcoesOrdenacao.classList.add("oculto");
      iconeSeta.style.transform = "rotate(0deg)";
    });
  });

  // Inicializa a op√ß√£o selecionada (mais recentes por padr√£o)
  let inicial = opcoesOrdenacao.querySelector(".selecionada");
  if (!inicial) {
    inicial = Array.from(opcoes).find(o => o.dataset.ordem === "mais-recentes");
    if (inicial) {
      console.log("üéØ Sele√ß√£o inicial: mais recentes");
      atualizarSelecao(inicial);
    }
  } else {
    textoOrdenar.textContent = inicial.textContent.replace("‚úî", "").trim();
  }

  // Fun√ß√£o para pegar data segura (trata vazio)
  const getData = (el, campo) => {
    const val = el.dataset[campo];
    return val ? new Date(val) : Infinity; // Infinity para colocar no final se vazio
  };

  // Fun√ß√£o para pegar n√∫mero seguro (trata vazio)
  const getNumero = (el, campo) => parseFloat(el.dataset[campo]) || 0;

  // Fun√ß√£o de ordena√ß√£o das propostas
  const ordenarPropostas = (tipo) => {
    console.log("üìä Ordenando propostas por:", tipo);
    const container = document.querySelector(".grid");
    if (!container) {
      console.warn("‚ö†Ô∏è Container de propostas n√£o encontrado");
      return;
    }

    const propostas = Array.from(container.querySelectorAll(".card"));
    console.log("üìå Propostas encontradas:", propostas.length);
    propostas.forEach((p, i) => {
      console.log(`üìù #${i+1}: ${p.dataset.titulo || p.dataset.dataproposta} | Pre√ßo: ${p.dataset.orcamento || '0'} | Prazo: ${p.dataset.prazoentrega || 'N/A'}`);
    });

    propostas.sort((a, b) => {
      switch(tipo) {
        case "mais-recentes":
          return getData(b, "dataproposta") - getData(a, "dataproposta");
        case "mais-antigos":
          return getData(a, "dataproposta") - getData(b, "dataproposta");
        case "prazo-curto":
          return getData(a, "prazoentrega") - getData(b, "prazoentrega"); // menor prazo primeiro
        case "prazo-longo":
          return getData(b, "prazoentrega") - getData(a, "prazoentrega"); // maior prazo primeiro
        case "orcamento-maior":
          return getNumero(b, "orcamento") - getNumero(a, "orcamento");
        case "orcamento-menor":
          return getNumero(a, "orcamento") - getNumero(b, "orcamento");
       case "titulo-az":
          const tituloA = (a.dataset.titulo || "").replace(/^[^a-zA-Z0-9]+/, "");
          const tituloB = (b.dataset.titulo || "").replace(/^[^a-zA-Z0-9]+/, "");
          return tituloA.localeCompare(tituloB);
        case "titulo-za":
          const tituloA2 = (a.dataset.titulo || "").replace(/^[^a-zA-Z0-9]+/, "");
          const tituloB2 = (b.dataset.titulo || "").replace(/^[^a-zA-Z0-9]+/, "");
          return tituloB2.localeCompare(tituloA2);

           default:
          return 0;
      }
    });

    propostas.forEach(p => container.appendChild(p));
    console.log("‚úÖ Ordena√ß√£o aplicada!");
  };

  // Aplica ordena√ß√£o inicial
  const inicialOrdem = opcoesOrdenacao.querySelector(".selecionada");
  if (inicialOrdem) {
    console.log("üéØ Aplicando ordena√ß√£o inicial:", inicialOrdem.dataset.ordem);
    ordenarPropostas(inicialOrdem.dataset.ordem);
  }
});
</script>
