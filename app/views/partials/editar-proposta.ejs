<link rel="stylesheet" href="/css/editar-proposta.css">
<!-- Modal para edição de proposta de projeto -->
<section id="modal-editar-proposta" class="modal-editar-publicacao">
  <section class="modal-content-editar-publicacao">
    <span class="fechar-editar-publicacao" id="fechar-modal-editar-proposta">&times;</span>
    <h2 class="titulo-modal-editar-publicacao">Editar Proposta de Projeto</h2>

    <section class="form-editar-publicacao">
      <form action="/editar-proposta" method="POST">
        <input type="hidden" name="id_proposta" id="id-editar-proposta" value="">

        <section class="conteudo-editar-publicacao">
          <section class="dados">

            <section class="inputs-1">
              <!-- Título -->
              <section class="form-grupo-1">
                <label for="titulo-editar-proposta">Título:</label>
                <input type="text" id="titulo-editar-proposta" name="titulo_proposta" class="caixa-texto" required>
              </section>
              <!-- Categoria -->
              <section class="form-grupo-1">
                <label for="categoria-editar-proposta">Categoria:</label>
                <select id="categoria-editar-proposta" name="categoria_proposta" class="caixa-texto" required>
                  <option value="">-- Selecione a categoria --</option>
                  <option value="design_grafico">Design Gráfico</option>
                  <option value="ilustracao">Ilustração</option>
                  <option value="UI/UX">UI/UX</option>
                  <option value="arte_digital">Arte Digital</option>
                  <option value="arte_3D">Arte 3D</option>
                  <option value="animacao">Animação</option>
                  <option value="branding">Branding</option>
                  <option value="tipografia">Tipografia</option>
                  <option value="modelagem_3d">Modelagem 3D</option>
                  <option value="design_de_produto">Design de Produto</option>
                  <option value="design-editorial">Design Editorial</option>
                  <option value="design_de_jogos">Design de jogos</option>
                  <option value="fotografia">Fotografia</option>
              
                  <!-- ... (outras opções) -->
                  <option value="outro">Outros</option>
                </select>
                <section id="outra-categoria-container-proposta" style="display:none; margin-top:10px;">
                  <label for="outraCategoriaProposta">Digite a categoria:</label>
                  <input type="text" id="outraCategoriaProposta" name="outraCategoria" placeholder="Ex: Lettering">
                </section>
              </section>


                <!-- Orçamento -->
            <section class="form-grupo-1">
              <label for="orcamento-editar-proposta">Orçamento (R$):</label>
              <input type="number" id="orcamento-editar-proposta" name="orcamento" class="caixa-texto" >
            </section>

            <!-- Prazo de entrega -->
            <section class="form-grupo-1">
              <label for="prazo-editar-proposta">Prazo de Entrega:</label>
              <input type="date" id="prazo-editar-proposta" name="prazo_entrega" class="caixa-texto">
            </section>

            </section>

         <!-- Descrição (substituindo textarea pelo Quill) -->
<section class="form-grupo-1 form-quill">
  <label for="descricao-editar-proposta">Descrição detalhada:</label>
  <div id="editor-descricao" style="height: 200px; background: white;"></div>
  <input type="hidden" id="descricao-editar-proposta" name="descricao_proposta" />
</section>


          
          </section>
        </section>

        <section class="secao-btns-modal">
          <button type="submit" class="btn-salvar-editar-publicacao">Salvar Alterações</button>
        </section>
      </form>

     
     
    </section>
  </section>
</section>
<!-- Incluir Quill CSS e JS (pode ser no <head> da página) -->
  <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet" />
  <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
  <script>
    // Inicializa Quill no campo descrição
    console.log('Inicializando Quill...');
    const quill = new Quill('#editor-descricao', {
      theme: 'snow',
      placeholder: 'Descreva detalhadamente...'
    });
    console.log('Quill inicializado:', quill);
  
    // Mostrar campo "outra categoria"
    const selectCategoria = document.getElementById('categoria-editar-proposta');
    const inputOutraCategoria = document.getElementById('outraCategoriaProposta');
    const containerOutraCategoria = document.getElementById('outra-categoria-container-proposta');
  
    selectCategoria.addEventListener('change', () => {
      console.log('Categoria mudou para:', selectCategoria.value);
      if (selectCategoria.value === 'outro') {
        containerOutraCategoria.style.display = 'block';
        inputOutraCategoria.required = true;
        console.log('Mostrando campo "Outra Categoria" e tornando obrigatório');
      } else {
        containerOutraCategoria.style.display = 'none';
        inputOutraCategoria.required = false;
        inputOutraCategoria.value = "";
        console.log('Escondendo campo "Outra Categoria" e limpando valor');
      }
    });
  
    const formProposta = document.querySelector('#modal-editar-proposta form');
    formProposta.addEventListener('submit', (event) => {
      console.log('Formulário enviado. Preparando dados...');
  
      // Antes de enviar, copia conteúdo do Quill para input hidden
      const descricaoHTML = quill.root.innerHTML;
      document.getElementById('descricao-editar-proposta').value = descricaoHTML;
      console.log('Conteúdo do Quill copiado para textarea:', descricaoHTML);
  
      // Ajusta categoria se "outro" preenchido
      if (selectCategoria.value === 'outro' && inputOutraCategoria.value.trim() !== '') {
        console.log('Categoria "outro" preenchida com:', inputOutraCategoria.value.trim());
        selectCategoria.value = inputOutraCategoria.value.trim();
        console.log('selectCategoria.value ajustado para:', selectCategoria.value);
      } else {
        console.log('Categoria não é "outro" ou campo "outra categoria" vazio');
      }
    });
  
    // Abrir modal e preencher campos
    document.addEventListener('click', function (e) {
      const btn = e.target.closest('.btn-editar');
      if (!btn) {
        // Se não clicar no botão editar, ignora
        return;
      }
      console.log('Botão editar clicado:', btn);
  
      const idProposta = btn.getAttribute('data-id');
      const titulo = btn.getAttribute('data-titulo') || '';
      const categoria = btn.getAttribute('data-categoria') || '';
      const descricao = btn.getAttribute('data-descricao') || '';
      const prazoEntrega = btn.getAttribute('data-prazoentrega') || '';
      const orcamento = btn.getAttribute('data-orcamento') || '';
  
      console.log('Dados extraídos do botão:');
      console.log({ idProposta, titulo, categoria, descricao, prazoEntrega, orcamento });
  
      // Preencher campos do formulário
      document.getElementById('id-editar-proposta').value = idProposta;
   
      document.getElementById('titulo-editar-proposta').value = titulo;

      // Se a categoria não existir nas opções, adiciona dinamicamente
      let found = false;
      for (let i = 0; i < selectCategoria.options.length; i++) {
        if (selectCategoria.options[i].value === categoria) {
          found = true;
          break;
        }
      }
      if (!found && categoria && categoria !== 'outro') {
        const opt = document.createElement('option');
        opt.value = categoria;
        opt.textContent = categoria.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        selectCategoria.appendChild(opt);
      }
      selectCategoria.value = categoria;

      // Mostrar ou ocultar campo "outra categoria"
      if (categoria === 'outro') {
        containerOutraCategoria.style.display = 'block';
        inputOutraCategoria.required = true;
        inputOutraCategoria.value = '';
        selectCategoria.value = 'outro';
        console.log('Categoria é "outro", mostrando campo para digitar categoria');
      } else {
        containerOutraCategoria.style.display = 'none';
        inputOutraCategoria.required = false;
        inputOutraCategoria.value = '';
        console.log('Categoria não é "outro", escondendo campo para digitar categoria');
      }
  
      // Atualiza conteúdo do Quill com a descrição (HTML)
      console.log('Atualizando conteúdo do Quill com descrição:', descricao);
      quill.root.innerHTML = descricao;
  

      // Preenche o campo data: se vier vazio, tenta buscar do card da proposta
      const inputPrazo = document.getElementById('prazo-editar-proposta');
      if (prazoEntrega) {
        inputPrazo.value = prazoEntrega;
        console.log('Prazo de entrega setado para:', prazoEntrega);
      } else {
        // Busca o card da proposta pelo id
        const card = document.querySelector(`.card[data-id='${idProposta}']`);
        let prazoCard = '';
        if (card) {
          prazoCard = card.getAttribute('data-prazoentrega') || '';
        }
        inputPrazo.value = prazoCard;
        console.log('Prazo de entrega recuperado do card:', prazoCard);
      }
  
      document.getElementById('orcamento-editar-proposta').value = orcamento;
      console.log('Orçamento setado para:', orcamento);
  
      // Mostrar modal
      const modal = document.getElementById('modal-editar-proposta');
      modal.style.display = 'flex';
      document.body.style.overflow = 'hidden';
      console.log('Modal aberto e scroll da página desativado');
    });
  
    // Fechar modal
    document.getElementById('fechar-modal-editar-proposta').addEventListener('click', () => {
      console.log('Fechar modal clicado');
      fecharModalProposta();
    });
  
    window.addEventListener('click', (event) => {
      if (event.target.id === 'modal-editar-proposta') {
        console.log('Clique fora do modal detectado, fechando modal');
        fecharModalProposta();
      }
    });
  
    function fecharModalProposta() {
      const modal = document.getElementById('modal-editar-proposta');
      modal.style.display = 'none';
      document.body.style.overflow = '';
      console.log('Modal fechado e scroll da página ativado');
    }
  </script>
  





  <script>

const inputTitulo = document.getElementById('titulo-editar-proposta');
const inputCategoria = document.getElementById('categoria-editar-proposta');

const inputPrazo = document.getElementById('prazo-editar-proposta');
const inputDescricaoHidden = document.getElementById('descricao-editar-proposta');

// Função auxiliar para criar/atualizar mensagem de erro
function setErro(input, msg) {
  input.style.border = '2px solid red';
  let erroEl = input.parentElement.querySelector('.msg-erro');
  if (!erroEl) {
    erroEl = document.createElement('small');
    erroEl.className = 'msg-erro';
    erroEl.style.color = 'red';
    erroEl.style.display = 'block';
    erroEl.style.marginTop = '4px';
    input.parentElement.appendChild(erroEl);
  }
  erroEl.textContent = msg;
}

// Função para remover mensagem de erro
function clearErro(input) {
  input.style.border = '';
  const erroEl = input.parentElement.querySelector('.msg-erro');
  if (erroEl) erroEl.remove();
}

formProposta.addEventListener('submit', (event) => {
  event.preventDefault(); // impede envio imediato
  let erro = false;

  // Copiar conteúdo do Quill para input hidden
  inputDescricaoHidden.value = quill.root.innerHTML.trim();

  // Limpa erros anteriores
  [inputTitulo, inputCategoria, inputOutraCategoria, inputPrazo, quill.root].forEach(clearErro);

  // Título obrigatório
  if (inputTitulo.value.trim() === '') {
    setErro(inputTitulo, 'O título é obrigatório.');
    erro = true;
  }

  // Categoria obrigatória
  if (inputCategoria.value === '') {
    setErro(inputCategoria, 'Escolha uma categoria.');
    erro = true;
  }

  // Categoria "outro"
  if (inputCategoria.value === 'outro' && inputOutraCategoria.value.trim() === '') {
    setErro(inputOutraCategoria, 'Digite a categoria.');
    erro = true;
  }

  // Prazo obrigatório e futuro até 31/12/2030
  const hoje = new Date(); hoje.setHours(0,0,0,0);
  const dataMax = new Date('2030-12-31');
  const prazoValor = inputPrazo.value ? new Date(inputPrazo.value) : null;

  if (!prazoValor) {
    setErro(inputPrazo, 'Informe o prazo de entrega.');
    erro = true;
  } else if (prazoValor < hoje) {
    setErro(inputPrazo, 'A data deve ser futura.');
    erro = true;
  } else if (prazoValor > dataMax) {
    setErro(inputPrazo, 'A data não pode passar de 31/12/2030.');
    erro = true;
  }

  // Descrição do Quill obrigatória
  if (!quill.getText().trim()) {
    setErro(quill.root, 'A descrição não pode estar vazia.');
    erro = true;
  }

  if (!erro) {
    // Ajusta categoria "outro" se preenchida
    if (inputCategoria.value === 'outro') {
      inputCategoria.value = inputOutraCategoria.value.trim();
    }
    formProposta.submit();
  } else {
    console.log('Erro na validação. Corrija os campos destacados.');
  }
});
</script>
